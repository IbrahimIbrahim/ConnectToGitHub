1) To Generate RSA Keys Locally (i.e., on the client), type in the command line:
      $ mkdir ~/.ssh
      $ chmod 700 ~/.ssh
    # Creates a directory for RSA Keys.

      $ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
    # Creates a new ssh key, using the provided email as a label.

2) Enter the name of the file you are creating (i.e., mylocalgit).

3) Enter the passphrase when prompted.
    # This passphrase will protect your private key while it's stored on the hard drive.
    
      $ ls -al ~/.ssh
    # Checks for existing SSH keys on your computer and lists the files in your .ssh directory.
    
4) Add your key to the ssh-agent:
    # ssh-agent provides a secure way of storing the private key. It’s a program that runs in the background 
    # and keeps your key loaded into memory, so that you don’t need to enter your passphrase every time you 
    # need to use the key. 
      
      $ eval "$(ssh-agent -s)"
    # starts the ssh-agent in the background.
      
      $ ssh-add mylocalgit
    # Adds your generated SSH key to the ssh-agent.
    
5) Add your SSH key to your account:
    # Using a text editor, open the ~/.ssh/id_rsa.pub (or as in our case here /mylocalgit.pub) file.
    # Select the entire contents of the file and copy it to your clipboard.
    # Paste your key into the "Key" field in your GitHub account. 
    
6) Test the conncetion:
      $ ssh -T git@github.com
    # Verify the fingerprint you receive, it should be:
    # RSA key fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48
    # You can also be more assured when the username in the message is yours; 
    # if yes, then you've successfully set up your SSH key!
    
7) Switch remote URLs from HTTPS to SSH
      $ mkdir ./localgitrep
    # Creates the local repository directory. Enter into it! 
      $ git init
    # Initialize it.
      
      $ git remote -v
    # Lists your existing remotes in order to get the name of the remote you want to change.
    
      $ git remote set-url origin git@github.com:IbrahimIbrahim/ConnectToGitHubUsingSSH.git
    # Changes your remote's URL from HTTPS to SSH or simply set a new remote in case none existed before:
      $ git remote add origin git@github.com:IbrahimIbrahim/ConnectToGitHubUsingSSH.git
    # notice that "IbrahimIbrahim" is my own account's name on gitHub, you need to modify this to your own account!

8) Create a local clone of the project you want to fork on GitHub
    # On GitHub, create your fork, then navigate to your local git directory and type:
      $ git clone git@github.com:IbrahimIbrahim/DataScienceSpCourseNotes.git
	
9) Configure Git to sync your fork with the original DataScienceSpCourseNotes repository
    # You will notice that using the command "git remote -v" will not show you an upstream to this project, hence, you need to add it yourself:
      $ git remote add upstream git@github.com:IbrahimIbrahim/DataScienceSpCourseNotes.git
    # By typing, "git remote -v", the upstream will show up among the other remotes.

10) Syncing the fork:
      $ git fetch upstream
    # Fetches the branches and their respective commits from the upstream repository. Commits to master will be stored in a local branch, upstream/master.

      $ git checkout master
    # Checkes-out/Creates your fork's local master branch.

      $ git merge upstream/master
    # Merges the changes from upstream/master into your local master branch. This brings your fork's master branch into sync with the upstream repository, without losing your local changes.
    # If your local branch didn't have any unique commits, Git will instead perform a "fast-forward".
    # Syncing your fork only updates your local copy of the repository. To update your fork on GitHub, you must push your changes.

    # We can view all existing branches by typing the following:
      $ git branch -a

11) Pushing changes into GitHub repository:
    # If you make changes in the directory LearnGit by modifying files or adding new ones
    # for example then:
      $ git add -A ./LearnGit
      $ git commit -a

    # or simply
      $ git commit -m # This spares you the extra time accessing the file 
		      # and adding the message inside of it
    # takes place locally

      $ git push origin master
    # takes place remotely
   
    # or simply
      $ git push

12) Recovering deleted files:
    # if you mistakenly removed files with:
      $ git ls-files -z | xargs -0 rm -f
    # you can recover them using:
      $ git reset HEAD
      $ git reset --hard HEAD
